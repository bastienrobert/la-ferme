interface Game {
  boxID: UUID!
  players: [Player]!
}

enum GameStatusType {
  start
  end
  report
  ready
  round
  skill
}

interface GameStatus {
  type: GameStatusType!
  boxID: UUID!
  players: [Player]!
}

type GameStatusDefault implements GameStatus {
  type: GameStatusType!
  boxID: UUID!
  players: [Player]!
}

type GameStatusRound implements GameStatus {
  type: GameStatusType!
  boxID: UUID!
  players: [Player]!
  round: Round!
}

type GameStatusReady implements GameStatus {
  type: GameStatusType!
  boxID: UUID!
  players: [Player]!
}

type GameStatusWon implements GameStatus {
  type: GameStatusType!
  boxID: UUID!
  players: [Player]!
  winnerUUID: UUID!
}

extend type Query {
  getReadyPlayers(boxID: UUID!): [Player]!
}

extend type Mutation {
  startGame(boxID: UUID!, userUUID: UUID!): Boolean!
  stopGame(boxID: UUID!, winnerUUID: UUID!): Boolean!
}

extend type Subscription {
  gameUpdated(boxID: UUID!): GameStatus!
}
